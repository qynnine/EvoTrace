package evotrace.diff;

import evotrace.util._;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by niejia on 15/10/6.
 */
public class DiffParser {

    private final String[] content;
    private final String extendName;

    private List<String> addedFileNames;
    private List<String> removedFileNames;
    private List<String> changedFileNames;

    private String newVersionName;
    private String oldVersionName;

    /**
     * @param diffFilePath is the path of file which is generated by unix diff tool
     * @param newVersionName
     * @param oldVersionName
     * @param extendName
     */
    public DiffParser(String diffFilePath,String newVersionName, String oldVersionName, String extendName) {
        String input = _.readFile(diffFilePath);
        if (input == null) {
            throw new NoSuchFieldError("Can't find diff file.");
        }
        this.content = input.split("\n");
        this.extendName = extendName;

        this.newVersionName = newVersionName;
        this.oldVersionName = oldVersionName;

        this.addedFileNames = new ArrayList<>();
        this.removedFileNames = new ArrayList<>();
        this.changedFileNames = new ArrayList<>();

        parser();
    }

    private void parser() {
        for (int i = 0; i < content.length; i++) {
            String line = content[i];
            if (line.startsWith("Only in " + newVersionName)) {
                String fileName = fetchFileName(line);
                addedFileNames.add(fileName);
            } else if (line.startsWith("Only in " + oldVersionName)) {
                String fileName = fetchFileName(line);
                removedFileNames.add(fileName);
            } else if (line.startsWith("diff")) {
                String fileName = fetchFileName(line);
                changedFileNames.add(fileName);
            }
        }
    }

    public String fetchFileName(String str) {
        Pattern p= Pattern.compile("[\\w.]*\\."+extendName);
        Matcher m= p.matcher(str);

        if (m.find()) {
            String matched = m.group();
            return matched;
        }

        throw new IllegalArgumentException("Can't fetch fileName in " + str);
    }

    public int addedFilesCount() {
        return addedFileNames.size();
    }

    public int removedFilesCount() {
        return removedFileNames.size();
    }

    public int changedFilesCount() {
        return changedFileNames.size();
    }

    public List<String> getAddedFileNames() {
        return addedFileNames;
    }

    public List<String> getChangedFileNames() {
        return changedFileNames;
    }

    public List<String> getRemovedFileNames() {
        return removedFileNames;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("---------------- division ----------------");
        sb.append("\n");
        sb.append("Compared versions: " + newVersionName + " and " + oldVersionName);
        sb.append("\n");

        sb.append("Added files" + "(" + addedFilesCount() + "):");
        sb.append("\n");
        for (String f : addedFileNames) {
            sb.append(f);
            sb.append("\n");
        }
        sb.append("\n");

        sb.append("Removed files" + "(" + removedFilesCount() + "):");
        sb.append("\n");
        for (String f : removedFileNames) {
            sb.append(f);
            sb.append("\n");
        }
        sb.append("\n");

        sb.append("Changed files" + "(" + changedFilesCount() + "):");
        sb.append("\n");
        for (String f : changedFileNames) {
            sb.append(f);
            sb.append("\n");
        }

        return sb.toString();
    }


}
